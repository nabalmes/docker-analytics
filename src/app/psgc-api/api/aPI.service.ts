/**
 * PSGC API
 * Current data is as of June 30, 2021. Data is based from https://psa.gov.ph/classification/psgc/ (Publication file).<br/><br/>Limitation: The content-type header of the API is text/html instead of application/json. Use API JSON call if content-type header application/json is needed<br/><br/>Issues/request/suggestions: Kindly file your concern here <a href='https://gitlab.com/psgc/api/issues' target='_blank'>https://gitlab.com/psgc/api/issues</a>
 *
 * OpenAPI spec version: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Barangay } from '../model/barangay';
import { City } from '../model/city';
import { CityMunicipality } from '../model/cityMunicipality';
import { District } from '../model/district';
import { IslandGroup } from '../model/islandGroup';
import { Municipality } from '../model/municipality';
import { Province } from '../model/province';
import { Region } from '../model/region';
import { SubMunicipality } from '../model/subMunicipality';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class APIService {

    protected basePath = 'https://psgc.gitlab.io/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param barangayCode barangay code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public barangaysBarangayCodeGet(barangayCode: string, observe?: 'body', reportProgress?: boolean): Observable<Barangay>;
    public barangaysBarangayCodeGet(barangayCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Barangay>>;
    public barangaysBarangayCodeGet(barangayCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Barangay>>;
    public barangaysBarangayCodeGet(barangayCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (barangayCode === null || barangayCode === undefined) {
            throw new Error('Required parameter barangayCode was null or undefined when calling barangaysBarangayCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Barangay>('get',`${this.basePath}/barangays/${encodeURIComponent(String(barangayCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public barangaysGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public barangaysGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public barangaysGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public barangaysGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cityCode city code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesCityCodeBarangaysGet(cityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public citiesCityCodeBarangaysGet(cityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public citiesCityCodeBarangaysGet(cityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public citiesCityCodeBarangaysGet(cityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityCode === null || cityCode === undefined) {
            throw new Error('Required parameter cityCode was null or undefined when calling citiesCityCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/cities/${encodeURIComponent(String(cityCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cityCode city code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesCityCodeGet(cityCode: string, observe?: 'body', reportProgress?: boolean): Observable<City>;
    public citiesCityCodeGet(cityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<City>>;
    public citiesCityCodeGet(cityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<City>>;
    public citiesCityCodeGet(cityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityCode === null || cityCode === undefined) {
            throw new Error('Required parameter cityCode was null or undefined when calling citiesCityCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<City>('get',`${this.basePath}/cities/${encodeURIComponent(String(cityCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public citiesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public citiesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public citiesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/cities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cityOrMunicipalityCode city or municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysGet(cityOrMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysGet(cityOrMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysGet(cityOrMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysGet(cityOrMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityOrMunicipalityCode === null || cityOrMunicipalityCode === undefined) {
            throw new Error('Required parameter cityOrMunicipalityCode was null or undefined when calling citiesMunicipalitiesCityOrMunicipalityCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/cities-municipalities/${encodeURIComponent(String(cityOrMunicipalityCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cityOrMunicipalityCode city or municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesMunicipalitiesCityOrMunicipalityCodeGet(cityOrMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<CityMunicipality>;
    public citiesMunicipalitiesCityOrMunicipalityCodeGet(cityOrMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CityMunicipality>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeGet(cityOrMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CityMunicipality>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeGet(cityOrMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityOrMunicipalityCode === null || cityOrMunicipalityCode === undefined) {
            throw new Error('Required parameter cityOrMunicipalityCode was null or undefined when calling citiesMunicipalitiesCityOrMunicipalityCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CityMunicipality>('get',`${this.basePath}/cities-municipalities/${encodeURIComponent(String(cityOrMunicipalityCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesMunicipalitiesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public citiesMunicipalitiesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public citiesMunicipalitiesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public citiesMunicipalitiesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/cities-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeBarangaysGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public districtsDistrictCodeBarangaysGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public districtsDistrictCodeBarangaysGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public districtsDistrictCodeBarangaysGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeCitiesGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public districtsDistrictCodeCitiesGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public districtsDistrictCodeCitiesGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public districtsDistrictCodeCitiesGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeCitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/cities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeCitiesMunicipalitiesGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public districtsDistrictCodeCitiesMunicipalitiesGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public districtsDistrictCodeCitiesMunicipalitiesGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public districtsDistrictCodeCitiesMunicipalitiesGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeCitiesMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/cities-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param districtCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<District>;
    public districtsDistrictCodeGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<District>>;
    public districtsDistrictCodeGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<District>>;
    public districtsDistrictCodeGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<District>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeMunicipalitiesGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public districtsDistrictCodeMunicipalitiesGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public districtsDistrictCodeMunicipalitiesGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public districtsDistrictCodeMunicipalitiesGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeSubMunicipalitiesGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public districtsDistrictCodeSubMunicipalitiesGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public districtsDistrictCodeSubMunicipalitiesGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public districtsDistrictCodeSubMunicipalitiesGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeSubMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/sub-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public districtsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public districtsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public districtsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<District>>('get',`${this.basePath}/districts/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<IslandGroup>>;
    public islandGroupsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IslandGroup>>>;
    public islandGroupsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IslandGroup>>>;
    public islandGroupsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IslandGroup>>('get',`${this.basePath}/island-groups/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeBarangaysGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public islandGroupsIslandGroupCodeBarangaysGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public islandGroupsIslandGroupCodeBarangaysGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public islandGroupsIslandGroupCodeBarangaysGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeCitiesGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public islandGroupsIslandGroupCodeCitiesGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public islandGroupsIslandGroupCodeCitiesGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public islandGroupsIslandGroupCodeCitiesGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeCitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/cities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeCitiesMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/cities-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeDistrictsGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public islandGroupsIslandGroupCodeDistrictsGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public islandGroupsIslandGroupCodeDistrictsGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public islandGroupsIslandGroupCodeDistrictsGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeDistrictsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<District>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/districts/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<IslandGroup>;
    public islandGroupsIslandGroupCodeGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IslandGroup>>;
    public islandGroupsIslandGroupCodeGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IslandGroup>>;
    public islandGroupsIslandGroupCodeGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IslandGroup>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeMunicipalitiesGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public islandGroupsIslandGroupCodeMunicipalitiesGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public islandGroupsIslandGroupCodeMunicipalitiesGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public islandGroupsIslandGroupCodeMunicipalitiesGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeProvincesGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public islandGroupsIslandGroupCodeProvincesGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public islandGroupsIslandGroupCodeProvincesGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public islandGroupsIslandGroupCodeProvincesGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeProvincesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Province>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/provinces/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeRegionsGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Region>>;
    public islandGroupsIslandGroupCodeRegionsGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Region>>>;
    public islandGroupsIslandGroupCodeRegionsGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Region>>>;
    public islandGroupsIslandGroupCodeRegionsGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeRegionsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Region>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/regions/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeSubMunicipalitiesGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public islandGroupsIslandGroupCodeSubMunicipalitiesGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public islandGroupsIslandGroupCodeSubMunicipalitiesGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public islandGroupsIslandGroupCodeSubMunicipalitiesGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeSubMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/sub-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public municipalitiesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public municipalitiesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public municipalitiesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public municipalitiesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param municipalityCode municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public municipalitiesMunicipalityCodeBarangaysGet(municipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public municipalitiesMunicipalityCodeBarangaysGet(municipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public municipalitiesMunicipalityCodeBarangaysGet(municipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public municipalitiesMunicipalityCodeBarangaysGet(municipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (municipalityCode === null || municipalityCode === undefined) {
            throw new Error('Required parameter municipalityCode was null or undefined when calling municipalitiesMunicipalityCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/municipalities/${encodeURIComponent(String(municipalityCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param municipalityCode municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public municipalitiesMunicipalityCodeGet(municipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Municipality>;
    public municipalitiesMunicipalityCodeGet(municipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Municipality>>;
    public municipalitiesMunicipalityCodeGet(municipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Municipality>>;
    public municipalitiesMunicipalityCodeGet(municipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (municipalityCode === null || municipalityCode === undefined) {
            throw new Error('Required parameter municipalityCode was null or undefined when calling municipalitiesMunicipalityCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Municipality>('get',`${this.basePath}/municipalities/${encodeURIComponent(String(municipalityCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public provincesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public provincesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public provincesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Province>>('get',`${this.basePath}/provinces/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeBarangaysGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public provincesProvinceCodeBarangaysGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public provincesProvinceCodeBarangaysGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public provincesProvinceCodeBarangaysGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeCitiesGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public provincesProvinceCodeCitiesGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public provincesProvinceCodeCitiesGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public provincesProvinceCodeCitiesGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeCitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/cities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeCitiesMunicipalitiesGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public provincesProvinceCodeCitiesMunicipalitiesGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public provincesProvinceCodeCitiesMunicipalitiesGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public provincesProvinceCodeCitiesMunicipalitiesGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeCitiesMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/cities-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Province>;
    public provincesProvinceCodeGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Province>>;
    public provincesProvinceCodeGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Province>>;
    public provincesProvinceCodeGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Province>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeMunicipalitiesGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public provincesProvinceCodeMunicipalitiesGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public provincesProvinceCodeMunicipalitiesGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public provincesProvinceCodeMunicipalitiesGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeSubMunicipalitiesGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public provincesProvinceCodeSubMunicipalitiesGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public provincesProvinceCodeSubMunicipalitiesGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public provincesProvinceCodeSubMunicipalitiesGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeSubMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/sub-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Region>>;
    public regionsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Region>>>;
    public regionsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Region>>>;
    public regionsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Region>>('get',`${this.basePath}/regions/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeBarangaysGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public regionsRegionCodeBarangaysGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public regionsRegionCodeBarangaysGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public regionsRegionCodeBarangaysGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeCitiesGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public regionsRegionCodeCitiesGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public regionsRegionCodeCitiesGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public regionsRegionCodeCitiesGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeCitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/cities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeCitiesMunicipalitiesGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public regionsRegionCodeCitiesMunicipalitiesGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public regionsRegionCodeCitiesMunicipalitiesGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public regionsRegionCodeCitiesMunicipalitiesGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeCitiesMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/cities-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeDistrictsGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public regionsRegionCodeDistrictsGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public regionsRegionCodeDistrictsGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public regionsRegionCodeDistrictsGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeDistrictsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<District>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/districts/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Region>;
    public regionsRegionCodeGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Region>>;
    public regionsRegionCodeGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Region>>;
    public regionsRegionCodeGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Region>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeMunicipalitiesGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public regionsRegionCodeMunicipalitiesGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public regionsRegionCodeMunicipalitiesGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public regionsRegionCodeMunicipalitiesGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeProvincesGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public regionsRegionCodeProvincesGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public regionsRegionCodeProvincesGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public regionsRegionCodeProvincesGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeProvincesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Province>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/provinces/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeSubMunicipalitiesGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public regionsRegionCodeSubMunicipalitiesGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public regionsRegionCodeSubMunicipalitiesGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public regionsRegionCodeSubMunicipalitiesGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeSubMunicipalitiesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/sub-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subMunicipalitiesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public subMunicipalitiesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public subMunicipalitiesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public subMunicipalitiesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/sub-municipalities/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param subMunicipalityCode sub-municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subMunicipalitiesSubMunicipalityCodeBarangaysGet(subMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public subMunicipalitiesSubMunicipalityCodeBarangaysGet(subMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public subMunicipalitiesSubMunicipalityCodeBarangaysGet(subMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public subMunicipalitiesSubMunicipalityCodeBarangaysGet(subMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (subMunicipalityCode === null || subMunicipalityCode === undefined) {
            throw new Error('Required parameter subMunicipalityCode was null or undefined when calling subMunicipalitiesSubMunicipalityCodeBarangaysGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/sub-municipalities/${encodeURIComponent(String(subMunicipalityCode))}/barangays/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param subMunicipalityCode sub-municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subMunicipalitiesSubMunicipalityCodeGet(subMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<SubMunicipality>;
    public subMunicipalitiesSubMunicipalityCodeGet(subMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubMunicipality>>;
    public subMunicipalitiesSubMunicipalityCodeGet(subMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubMunicipality>>;
    public subMunicipalitiesSubMunicipalityCodeGet(subMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (subMunicipalityCode === null || subMunicipalityCode === undefined) {
            throw new Error('Required parameter subMunicipalityCode was null or undefined when calling subMunicipalitiesSubMunicipalityCodeGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SubMunicipality>('get',`${this.basePath}/sub-municipalities/${encodeURIComponent(String(subMunicipalityCode))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
