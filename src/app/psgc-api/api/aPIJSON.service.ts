/**
 * PSGC API
 * Current data is as of June 30, 2021. Data is based from https://psa.gov.ph/classification/psgc/ (Publication file).<br/><br/>Limitation: The content-type header of the API is text/html instead of application/json. Use API JSON call if content-type header application/json is needed<br/><br/>Issues/request/suggestions: Kindly file your concern here <a href='https://gitlab.com/psgc/api/issues' target='_blank'>https://gitlab.com/psgc/api/issues</a>
 *
 * OpenAPI spec version: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Barangay } from '../model/barangay';
import { City } from '../model/city';
import { CityMunicipality } from '../model/cityMunicipality';
import { District } from '../model/district';
import { IslandGroup } from '../model/islandGroup';
import { Municipality } from '../model/municipality';
import { Province } from '../model/province';
import { Region } from '../model/region';
import { SubMunicipality } from '../model/subMunicipality';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class APIJSONService {

    protected basePath = 'https://psgc.gitlab.io/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * json content type
     * 
     * @param barangayCode barangay code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public barangaysBarangayCodeJsonGet(barangayCode: string, observe?: 'body', reportProgress?: boolean): Observable<Barangay>;
    public barangaysBarangayCodeJsonGet(barangayCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Barangay>>;
    public barangaysBarangayCodeJsonGet(barangayCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Barangay>>;
    public barangaysBarangayCodeJsonGet(barangayCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (barangayCode === null || barangayCode === undefined) {
            throw new Error('Required parameter barangayCode was null or undefined when calling barangaysBarangayCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Barangay>('get',`${this.basePath}/barangays/${encodeURIComponent(String(barangayCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public barangaysJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public barangaysJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public barangaysJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public barangaysJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param cityCode city code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesCityCodeBarangaysJsonGet(cityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public citiesCityCodeBarangaysJsonGet(cityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public citiesCityCodeBarangaysJsonGet(cityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public citiesCityCodeBarangaysJsonGet(cityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityCode === null || cityCode === undefined) {
            throw new Error('Required parameter cityCode was null or undefined when calling citiesCityCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/cities/${encodeURIComponent(String(cityCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param cityCode city code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesCityCodeJsonGet(cityCode: string, observe?: 'body', reportProgress?: boolean): Observable<City>;
    public citiesCityCodeJsonGet(cityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<City>>;
    public citiesCityCodeJsonGet(cityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<City>>;
    public citiesCityCodeJsonGet(cityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityCode === null || cityCode === undefined) {
            throw new Error('Required parameter cityCode was null or undefined when calling citiesCityCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<City>('get',`${this.basePath}/cities/${encodeURIComponent(String(cityCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public citiesJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public citiesJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public citiesJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/cities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param cityOrMunicipalityCode city or municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysJsonGet(cityOrMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysJsonGet(cityOrMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysJsonGet(cityOrMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeBarangaysJsonGet(cityOrMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityOrMunicipalityCode === null || cityOrMunicipalityCode === undefined) {
            throw new Error('Required parameter cityOrMunicipalityCode was null or undefined when calling citiesMunicipalitiesCityOrMunicipalityCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/cities-municipalities/${encodeURIComponent(String(cityOrMunicipalityCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param cityOrMunicipalityCode city or municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesMunicipalitiesCityOrMunicipalityCodeJsonGet(cityOrMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<CityMunicipality>;
    public citiesMunicipalitiesCityOrMunicipalityCodeJsonGet(cityOrMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CityMunicipality>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeJsonGet(cityOrMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CityMunicipality>>;
    public citiesMunicipalitiesCityOrMunicipalityCodeJsonGet(cityOrMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cityOrMunicipalityCode === null || cityOrMunicipalityCode === undefined) {
            throw new Error('Required parameter cityOrMunicipalityCode was null or undefined when calling citiesMunicipalitiesCityOrMunicipalityCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CityMunicipality>('get',`${this.basePath}/cities-municipalities/${encodeURIComponent(String(cityOrMunicipalityCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public citiesMunicipalitiesJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public citiesMunicipalitiesJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public citiesMunicipalitiesJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public citiesMunicipalitiesJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/cities-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeBarangaysJsonGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public districtsDistrictCodeBarangaysJsonGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public districtsDistrictCodeBarangaysJsonGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public districtsDistrictCodeBarangaysJsonGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeCitiesJsonGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public districtsDistrictCodeCitiesJsonGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public districtsDistrictCodeCitiesJsonGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public districtsDistrictCodeCitiesJsonGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeCitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/cities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeCitiesMunicipalitiesJsonGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public districtsDistrictCodeCitiesMunicipalitiesJsonGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public districtsDistrictCodeCitiesMunicipalitiesJsonGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public districtsDistrictCodeCitiesMunicipalitiesJsonGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeCitiesMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/cities-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param districtCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeJsonGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<District>;
    public districtsDistrictCodeJsonGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<District>>;
    public districtsDistrictCodeJsonGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<District>>;
    public districtsDistrictCodeJsonGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<District>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeMunicipalitiesJsonGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public districtsDistrictCodeMunicipalitiesJsonGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public districtsDistrictCodeMunicipalitiesJsonGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public districtsDistrictCodeMunicipalitiesJsonGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param districtCode district code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsDistrictCodeSubMunicipalitiesJsonGet(districtCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public districtsDistrictCodeSubMunicipalitiesJsonGet(districtCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public districtsDistrictCodeSubMunicipalitiesJsonGet(districtCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public districtsDistrictCodeSubMunicipalitiesJsonGet(districtCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling districtsDistrictCodeSubMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/districts/${encodeURIComponent(String(districtCode))}/sub-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public districtsJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public districtsJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public districtsJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public districtsJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<District>>('get',`${this.basePath}/districts.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeBarangaysJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public islandGroupsIslandGroupCodeBarangaysJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public islandGroupsIslandGroupCodeBarangaysJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public islandGroupsIslandGroupCodeBarangaysJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeCitiesJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public islandGroupsIslandGroupCodeCitiesJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public islandGroupsIslandGroupCodeCitiesJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public islandGroupsIslandGroupCodeCitiesJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeCitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/cities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public islandGroupsIslandGroupCodeCitiesMunicipalitiesJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeCitiesMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/cities-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeDistrictsJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public islandGroupsIslandGroupCodeDistrictsJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public islandGroupsIslandGroupCodeDistrictsJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public islandGroupsIslandGroupCodeDistrictsJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeDistrictsJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<District>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/districts.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<IslandGroup>;
    public islandGroupsIslandGroupCodeJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IslandGroup>>;
    public islandGroupsIslandGroupCodeJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IslandGroup>>;
    public islandGroupsIslandGroupCodeJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IslandGroup>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public islandGroupsIslandGroupCodeMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public islandGroupsIslandGroupCodeMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public islandGroupsIslandGroupCodeMunicipalitiesJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeProvincesJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public islandGroupsIslandGroupCodeProvincesJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public islandGroupsIslandGroupCodeProvincesJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public islandGroupsIslandGroupCodeProvincesJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeProvincesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Province>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/provinces.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeRegionsJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Region>>;
    public islandGroupsIslandGroupCodeRegionsJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Region>>>;
    public islandGroupsIslandGroupCodeRegionsJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Region>>>;
    public islandGroupsIslandGroupCodeRegionsJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeRegionsJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Region>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/regions.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param islandGroupCode island group code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsIslandGroupCodeSubMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public islandGroupsIslandGroupCodeSubMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public islandGroupsIslandGroupCodeSubMunicipalitiesJsonGet(islandGroupCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public islandGroupsIslandGroupCodeSubMunicipalitiesJsonGet(islandGroupCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (islandGroupCode === null || islandGroupCode === undefined) {
            throw new Error('Required parameter islandGroupCode was null or undefined when calling islandGroupsIslandGroupCodeSubMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/island-groups/${encodeURIComponent(String(islandGroupCode))}/sub-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public islandGroupsJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<IslandGroup>>;
    public islandGroupsJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IslandGroup>>>;
    public islandGroupsJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IslandGroup>>>;
    public islandGroupsJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IslandGroup>>('get',`${this.basePath}/island-groups.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public municipalitiesJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public municipalitiesJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public municipalitiesJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public municipalitiesJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param municipalityCode municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public municipalitiesMunicipalityCodeBarangaysJsonGet(municipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public municipalitiesMunicipalityCodeBarangaysJsonGet(municipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public municipalitiesMunicipalityCodeBarangaysJsonGet(municipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public municipalitiesMunicipalityCodeBarangaysJsonGet(municipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (municipalityCode === null || municipalityCode === undefined) {
            throw new Error('Required parameter municipalityCode was null or undefined when calling municipalitiesMunicipalityCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/municipalities/${encodeURIComponent(String(municipalityCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param municipalityCode municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public municipalitiesMunicipalityCodeJsonGet(municipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Municipality>;
    public municipalitiesMunicipalityCodeJsonGet(municipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Municipality>>;
    public municipalitiesMunicipalityCodeJsonGet(municipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Municipality>>;
    public municipalitiesMunicipalityCodeJsonGet(municipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (municipalityCode === null || municipalityCode === undefined) {
            throw new Error('Required parameter municipalityCode was null or undefined when calling municipalitiesMunicipalityCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Municipality>('get',`${this.basePath}/municipalities/${encodeURIComponent(String(municipalityCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public provincesJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public provincesJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public provincesJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Province>>('get',`${this.basePath}/provinces.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeBarangaysJsonGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public provincesProvinceCodeBarangaysJsonGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public provincesProvinceCodeBarangaysJsonGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public provincesProvinceCodeBarangaysJsonGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeCitiesJsonGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public provincesProvinceCodeCitiesJsonGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public provincesProvinceCodeCitiesJsonGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public provincesProvinceCodeCitiesJsonGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeCitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/cities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeCitiesMunicipalitiesJsonGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public provincesProvinceCodeCitiesMunicipalitiesJsonGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public provincesProvinceCodeCitiesMunicipalitiesJsonGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public provincesProvinceCodeCitiesMunicipalitiesJsonGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeCitiesMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/cities-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeJsonGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Province>;
    public provincesProvinceCodeJsonGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Province>>;
    public provincesProvinceCodeJsonGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Province>>;
    public provincesProvinceCodeJsonGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Province>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeMunicipalitiesJsonGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public provincesProvinceCodeMunicipalitiesJsonGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public provincesProvinceCodeMunicipalitiesJsonGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public provincesProvinceCodeMunicipalitiesJsonGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param provinceCode province code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public provincesProvinceCodeSubMunicipalitiesJsonGet(provinceCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public provincesProvinceCodeSubMunicipalitiesJsonGet(provinceCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public provincesProvinceCodeSubMunicipalitiesJsonGet(provinceCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public provincesProvinceCodeSubMunicipalitiesJsonGet(provinceCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (provinceCode === null || provinceCode === undefined) {
            throw new Error('Required parameter provinceCode was null or undefined when calling provincesProvinceCodeSubMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/provinces/${encodeURIComponent(String(provinceCode))}/sub-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Region>>;
    public regionsJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Region>>>;
    public regionsJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Region>>>;
    public regionsJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Region>>('get',`${this.basePath}/regions.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeBarangaysJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public regionsRegionCodeBarangaysJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public regionsRegionCodeBarangaysJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public regionsRegionCodeBarangaysJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeCitiesJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<City>>;
    public regionsRegionCodeCitiesJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<City>>>;
    public regionsRegionCodeCitiesJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<City>>>;
    public regionsRegionCodeCitiesJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeCitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<City>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/cities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeCitiesMunicipalitiesJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityMunicipality>>;
    public regionsRegionCodeCitiesMunicipalitiesJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityMunicipality>>>;
    public regionsRegionCodeCitiesMunicipalitiesJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityMunicipality>>>;
    public regionsRegionCodeCitiesMunicipalitiesJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeCitiesMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityMunicipality>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/cities-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeDistrictsJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<District>>;
    public regionsRegionCodeDistrictsJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<District>>>;
    public regionsRegionCodeDistrictsJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<District>>>;
    public regionsRegionCodeDistrictsJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeDistrictsJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<District>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/districts.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Region>;
    public regionsRegionCodeJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Region>>;
    public regionsRegionCodeJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Region>>;
    public regionsRegionCodeJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Region>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeMunicipalitiesJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Municipality>>;
    public regionsRegionCodeMunicipalitiesJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Municipality>>>;
    public regionsRegionCodeMunicipalitiesJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Municipality>>>;
    public regionsRegionCodeMunicipalitiesJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Municipality>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeProvincesJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Province>>;
    public regionsRegionCodeProvincesJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Province>>>;
    public regionsRegionCodeProvincesJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Province>>>;
    public regionsRegionCodeProvincesJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeProvincesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Province>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/provinces.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param regionCode region code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionsRegionCodeSubMunicipalitiesJsonGet(regionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public regionsRegionCodeSubMunicipalitiesJsonGet(regionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public regionsRegionCodeSubMunicipalitiesJsonGet(regionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public regionsRegionCodeSubMunicipalitiesJsonGet(regionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (regionCode === null || regionCode === undefined) {
            throw new Error('Required parameter regionCode was null or undefined when calling regionsRegionCodeSubMunicipalitiesJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/regions/${encodeURIComponent(String(regionCode))}/sub-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subMunicipalitiesJsonGet(observe?: 'body', reportProgress?: boolean): Observable<Array<SubMunicipality>>;
    public subMunicipalitiesJsonGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubMunicipality>>>;
    public subMunicipalitiesJsonGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubMunicipality>>>;
    public subMunicipalitiesJsonGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubMunicipality>>('get',`${this.basePath}/sub-municipalities.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param subMunicipalityCode sub-municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subMunicipalitiesSubMunicipalityCodeBarangaysJsonGet(subMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Barangay>>;
    public subMunicipalitiesSubMunicipalityCodeBarangaysJsonGet(subMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Barangay>>>;
    public subMunicipalitiesSubMunicipalityCodeBarangaysJsonGet(subMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Barangay>>>;
    public subMunicipalitiesSubMunicipalityCodeBarangaysJsonGet(subMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (subMunicipalityCode === null || subMunicipalityCode === undefined) {
            throw new Error('Required parameter subMunicipalityCode was null or undefined when calling subMunicipalitiesSubMunicipalityCodeBarangaysJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Barangay>>('get',`${this.basePath}/sub-municipalities/${encodeURIComponent(String(subMunicipalityCode))}/barangays.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * json content type
     * 
     * @param subMunicipalityCode sub-municipality code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subMunicipalitiesSubMunicipalityCodeJsonGet(subMunicipalityCode: string, observe?: 'body', reportProgress?: boolean): Observable<SubMunicipality>;
    public subMunicipalitiesSubMunicipalityCodeJsonGet(subMunicipalityCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubMunicipality>>;
    public subMunicipalitiesSubMunicipalityCodeJsonGet(subMunicipalityCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubMunicipality>>;
    public subMunicipalitiesSubMunicipalityCodeJsonGet(subMunicipalityCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (subMunicipalityCode === null || subMunicipalityCode === undefined) {
            throw new Error('Required parameter subMunicipalityCode was null or undefined when calling subMunicipalitiesSubMunicipalityCodeJsonGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SubMunicipality>('get',`${this.basePath}/sub-municipalities/${encodeURIComponent(String(subMunicipalityCode))}.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
